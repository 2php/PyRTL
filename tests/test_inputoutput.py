import unittest
import random
import io
import pyrtl

from .helperfunctions import *


full_adder_blif = """
# Generated by Yosys 0.3.0+ (git sha1 7e758d5, clang 3.4-1ubuntu3 -fPIC -Os)
.model full_adder
.inputs x y cin
.outputs sum cout
.names $false
.names $true
1
.names y $not$FA.v:12$3_Y
0 1
.names x $not$FA.v:11$1_Y
0 1
.names cin $not$FA.v:15$6_Y
0 1
.names ind3 ind4 sum
1- 1
-1 1
.names $not$FA.v:15$6_Y ind2 ind3
11 1
.names x $not$FA.v:12$3_Y ind1
11 1
.names ind2 $not$FA.v:16$8_Y
0 1
.names cin $not$FA.v:16$8_Y ind4
11 1
.names x y $and$FA.v:19$11_Y
11 1
.names ind0 ind1 ind2
1- 1
-1 1
.names cin ind2 $and$FA.v:19$12_Y
11 1
.names $and$FA.v:19$11_Y $and$FA.v:19$12_Y cout
1- 1
-1 1
.names $not$FA.v:11$1_Y y ind0
11 1
.end
"""

class TestInputFromBlif(unittest.TestCase):
    def setUp(self):
        pyrtl.reset_working_block()

    def test_romblock_does_not_throw_error(self):
        pyrtl.input_from_blif(full_adder_blif)
        x, y, cin = [pyrtl.working_block().get_wirevector_by_name(s) for s in ['x', 'y', 'cin']]
        io_vectors = pyrtl.working_block().wirevector_subset((pyrtl.Input, pyrtl.Output))


class TestOutputToTGF(unittest.TestCase):
    def setUp(self):
        pyrtl.reset_working_block()

    def test_output_to_tgf_does_not_throw_error(self):
        with io.StringIO() as vfile:
            pyrtl.input_from_blif(full_adder_blif)
            pyrtl.output_to_trivialgraph(vfile)


class TestOutputTextbench(unittest.TestCase):
    def setUp(self):
        pyrtl.reset_working_block()

    def test_verilog_testbench_does_not_throw_error(self):
        zero = pyrtl.Input(1, 'zero')
        counter_output = pyrtl.Output(3, 'counter_output')
        counter = pyrtl.Register(3, 'counter')
        counter.next <<= pyrtl.mux(zero, counter + 1, 0)
        counter_output <<= counter
        sim_trace = pyrtl.SimulationTrace([counter_output, zero])
        sim = pyrtl.Simulation(tracer=sim_trace)
        for cycle in range(15):
            sim.step({zero: random.choice([0, 0, 0, 1])})
        with io.StringIO() as tbfile:
            pyrtl.output_verilog_testbench(tbfile, sim_trace)


class TestVerilogNames(unittest.TestCase):
    def setUp(self):
        pyrtl.reset_working_block()

    def tearDown(self):
        pyrtl.reset_working_block()

    def checkname(self, name):
        t_in = pyrtl.WireVector(name=name, bitwidth=3)
        t_out = pyrtl.WireVector(name='t_out', bitwidth=3)
        t_out <<= t_in + 1
        with io.StringIO() as testbuffer:
            pyrtl.output_to_verilog(testbuffer)
        self.assertTrue(True)

    def test_verilog_check_valid_name_good(self):
        self.checkname('abc')

    def test_verilog_check_valid_name_good2(self):
        self.checkname('a')

    def test_verilog_check_valid_name_good3(self):
        self.checkname('BC')

    def test_verilog_check_valid_name_good4(self):
        self.checkname('Kabc')

    def test_verilog_check_valid_name_good5(self):
        self.checkname('B_ac')

    def test_verilog_check_valid_name_good6(self):
        self.checkname('_asdvqa')

    def test_verilog_check_valid_name_good7(self):
        self.checkname('_Bs_')

    def test_verilog_check_valid_name_good8(self):
        self.checkname('fd$oeoe')

    def test_verilog_check_valid_name_good9(self):
        self.checkname('_B$$s')

    def test_verilog_check_valid_name_good10(self):
        self.checkname('B')

    def test_verilog_check_valid_name_bad(self):
        self.assertRaises(pyrtl.PyrtlError, self.checkname, 'carne asda')
        self.assertRaises(pyrtl.PyrtlError, self.checkname, 'asd%kask')
        self.assertRaises(pyrtl.PyrtlError, self.checkname, "flipin'")
        self.assertRaises(pyrtl.PyrtlError, self.checkname, ' jklol')


class TestVerilog(unittest.TestCase):
    def setUp(self):
        pyrtl.reset_working_block()

    def test_romblock_does_not_throw_error(self):
        a = pyrtl.Input(bitwidth=3, name='a')
        b = pyrtl.Input(bitwidth=3, name='b')
        o = pyrtl.Output(bitwidth=3, name='o')
        sum, co = generate_full_adder(a, b)
        rdat = {0: 1, 1: 2, 2: 5, 5: 0}
        mixtable = pyrtl.RomBlock(addrwidth=3, bitwidth=3, romdata=rdat)
        o <<= mixtable[sum]
        with io.StringIO() as testbuffer:
            pyrtl.output_to_verilog(testbuffer)

    def test_textual_correctness(self):
        pass


if __name__ == "__main__":
    unittest.main()
